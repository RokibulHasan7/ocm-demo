apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: "2023-08-11T09:14:59Z"
  generation: 1
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: quick-postgres
    app.kubernetes.io/managed-by: kubedb.com
    app.kubernetes.io/name: postgreses.kubedb.com
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:app.kubernetes.io/component: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"1e8afd0b-667d-4e7c-af0d-611f3d8e10cc"}: {}
      f:spec:
        f:podManagementPolicy: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector: {}
        f:serviceName: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:app.kubernetes.io/component: {}
              f:app.kubernetes.io/instance: {}
              f:app.kubernetes.io/managed-by: {}
              f:app.kubernetes.io/name: {}
              f:kubedb.com/role: {}
          f:spec:
            f:affinity:
              .: {}
              f:podAntiAffinity:
                .: {}
                f:preferredDuringSchedulingIgnoredDuringExecution: {}
            f:containers:
              k:{"name":"postgres"}:
                .: {}
                f:args: {}
                f:command: {}
                f:env:
                  .: {}
                  k:{"name":"CLIENT_AUTH_MODE"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"DB_GID"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"DB_UID"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"INITDB"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MAJOR_PG_VERSION"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MAX_LAG_BEFORE_FAILOVER"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"NAMESPACE"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:fieldRef: {}
                  k:{"name":"PG_VERSION"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"PGDATA"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"POSTGRES_PASSWORD"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef: {}
                  k:{"name":"POSTGRES_USER"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef: {}
                  k:{"name":"PRIMARY_HOST"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"PV"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"SHARED_BUFFERS"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"SSL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"SSL_MODE"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"STANDBY"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"STREAMING"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:lifecycle:
                  .: {}
                  f:preStop:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":5432,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                f:resources:
                  .: {}
                  f:limits:
                    .: {}
                    f:memory: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                f:securityContext:
                  .: {}
                  f:capabilities:
                    .: {}
                    f:add: {}
                  f:privileged: {}
                  f:runAsGroup: {}
                  f:runAsUser: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/dev/shm"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/run_scripts"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/scripts"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/pv"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:dnsPolicy: {}
            f:initContainers:
              .: {}
              k:{"name":"postgres-init-container"}:
                .: {}
                f:env:
                  .: {}
                  k:{"name":"MAJOR_PG_VERSION"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"SSL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"STANDALONE"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources:
                  .: {}
                  f:limits:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/role_scripts"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/run_scripts"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/scripts"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/pv"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext:
              .: {}
              f:fsGroup: {}
              f:runAsGroup: {}
              f:runAsUser: {}
            f:serviceAccount: {}
            f:serviceAccountName: {}
            f:terminationGracePeriodSeconds: {}
            f:volumes:
              .: {}
              k:{"name":"role-scripts"}:
                .: {}
                f:emptyDir: {}
                f:name: {}
              k:{"name":"run-scripts"}:
                .: {}
                f:emptyDir: {}
                f:name: {}
              k:{"name":"scripts"}:
                .: {}
                f:emptyDir: {}
                f:name: {}
              k:{"name":"shared-memory"}:
                .: {}
                f:emptyDir:
                  .: {}
                  f:medium: {}
                f:name: {}
        f:updateStrategy:
          f:type: {}
        f:volumeClaimTemplates: {}
    manager: kubedb-provisioner
    operation: Update
    time: "2023-08-11T09:14:59Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:availableReplicas: {}
        f:collisionCount: {}
        f:currentReplicas: {}
        f:currentRevision: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updateRevision: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
    subresource: status
    time: "2023-08-11T09:15:22Z"
  name: quick-postgres
  namespace: app1
  ownerReferences:
  - apiVersion: kubedb.com/v1alpha2
    blockOwnerDeletion: true
    controller: true
    kind: Postgres
    name: quick-postgres
    uid: 1e8afd0b-667d-4e7c-af0d-611f3d8e10cc
  resourceVersion: "8683"
  uid: c83bddb9-abea-43de-973d-e45f07805132
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: quick-postgres
      app.kubernetes.io/managed-by: kubedb.com
      app.kubernetes.io/name: postgreses.kubedb.com
  serviceName: quick-postgres-pods
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: quick-postgres
        app.kubernetes.io/managed-by: kubedb.com
        app.kubernetes.io/name: postgreses.kubedb.com
        kubedb.com/role: primary
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: quick-postgres
                  app.kubernetes.io/managed-by: kubedb.com
                  app.kubernetes.io/name: postgreses.kubedb.com
              namespaces:
              - app1
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: quick-postgres
                  app.kubernetes.io/managed-by: kubedb.com
                  app.kubernetes.io/name: postgreses.kubedb.com
              namespaces:
              - app1
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 50
      containers:
      - args:
        - /scripts/run.sh
        command:
        - /scripts/tini
        - --
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: PRIMARY_HOST
          value: quick-postgres
        - name: MAX_LAG_BEFORE_FAILOVER
          value: "67108864"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: quick-postgres-auth
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: quick-postgres-auth
        - name: SHARED_BUFFERS
          value: 262144kB
        - name: PG_VERSION
          value: "13.2"
        - name: MAJOR_PG_VERSION
          value: "13"
        - name: CLIENT_AUTH_MODE
          value: md5
        - name: PV
          value: /var/pv
        - name: DB_UID
          value: "70"
        - name: DB_GID
          value: "70"
        - name: PGDATA
          value: /var/pv/data
        - name: INITDB
          value: /var/initdb
        - name: SSL_MODE
          value: disable
        - name: STANDBY
          value: warm
        - name: STREAMING
          value: asynchronous
        - name: SSL
          value: "OFF"
        image: postgres:13.2-alpine@sha256:c4c7a1585974706b5f72b8ab595e47399b23b2e03d93bbf75c1b0904be1803dc
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - pg_ctl
              - -m
              - fast
              - -w
              - stop
        name: postgres
        ports:
        - containerPort: 5432
          name: db
          protocol: TCP
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 1Gi
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
            - SYS_RESOURCE
          privileged: false
          runAsGroup: 70
          runAsUser: 70
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /dev/shm
          name: shared-memory
        - mountPath: /var/pv
          name: data
        - mountPath: /run_scripts
          name: run-scripts
        - mountPath: /scripts
          name: scripts
      dnsPolicy: ClusterFirst
      initContainers:
      - env:
        - name: STANDALONE
          value: "true"
        - name: MAJOR_PG_VERSION
          value: "13"
        - name: SSL
          value: "OFF"
        image: ghcr.io/kubedb/postgres-init:0.7.0@sha256:1ec7b6148de5f301ceee25257274408135c5acb99be61016191458a2f6976ff8
        imagePullPolicy: IfNotPresent
        name: postgres-init-container
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 200m
            memory: 128Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/pv
          name: data
        - mountPath: /run_scripts
          name: run-scripts
        - mountPath: /scripts
          name: scripts
        - mountPath: /role_scripts
          name: role-scripts
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 70
        runAsGroup: 70
        runAsUser: 70
      serviceAccount: quick-postgres
      serviceAccountName: quick-postgres
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: role-scripts
      - emptyDir: {}
        name: run-scripts
      - emptyDir: {}
        name: scripts
      - emptyDir:
          medium: Memory
        name: shared-memory
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: linode-block-storage-retain
      creationTimestamp: null
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: linode-block-storage-retain
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  availableReplicas: 1
  collisionCount: 0
  currentReplicas: 1
  currentRevision: quick-postgres-5b8444c786
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updateRevision: quick-postgres-5b8444c786
  updatedReplicas: 1
