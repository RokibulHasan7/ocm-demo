apiVersion: kubedb.com/v1alpha2
kind: Postgres
metadata:
  creationTimestamp: "2023-08-11T09:14:57Z"
  finalizers:
  - kubedb.com
  generation: 40
  managedFields:
  - apiVersion: kubedb.com/v1alpha2
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:ownerReferences:
          .: {}
          k:{"uid":"01e229f1-1ede-4e29-903e-895f04d3dfab"}: {}
      f:spec:
        .: {}
        f:allowedSchemas:
          .: {}
          f:namespaces:
            .: {}
            f:from: {}
        f:healthChecker:
          .: {}
          f:failureThreshold: {}
          f:periodSeconds: {}
          f:timeoutSeconds: {}
        f:storage:
          .: {}
          f:accessModes: {}
          f:resources:
            .: {}
            f:requests:
              .: {}
              f:storage: {}
          f:storageClassName: {}
        f:storageType: {}
        f:terminationPolicy: {}
        f:version: {}
    manager: work
    operation: Update
    time: "2023-08-11T09:14:57Z"
  - apiVersion: kubedb.com/v1alpha2
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:finalizers:
          .: {}
          v:"kubedb.com": {}
      f:spec:
        f:authSecret: {}
    manager: kubedb-provisioner
    operation: Update
    time: "2023-08-11T09:59:17Z"
  - apiVersion: kubedb.com/v1alpha2
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        .: {}
        f:conditions: {}
        f:observedGeneration: {}
        f:phase: {}
    manager: kubedb-provisioner
    operation: Update
    subresource: status
    time: "2023-08-11T09:59:22Z"
  name: quick-postgres
  namespace: app1
  ownerReferences:
  - apiVersion: work.open-cluster-management.io/v1
    kind: AppliedManifestWork
    name: 9817658e1634093b51306d2167783ce3fc0b11a58d19dbebe33eff8e94cdd833-db
    uid: 01e229f1-1ede-4e29-903e-895f04d3dfab
  resourceVersion: "12502"
  uid: 1e8afd0b-667d-4e7c-af0d-611f3d8e10cc
spec:
  allowedSchemas:
    namespaces:
      from: Same
  authSecret:
    name: quick-postgres-auth
  autoOps: {}
  clientAuthMode: md5
  coordinator:
    resources:
      limits:
        memory: 256Mi
      requests:
        cpu: 200m
        memory: 256Mi
  healthChecker:
    failureThreshold: 1
    periodSeconds: 10
    timeoutSeconds: 10
  leaderElection:
    electionTick: 10
    heartbeatTick: 1
    maximumLagBeforeFailover: 67108864
    period: 300ms
    transferLeadershipInterval: 1s
    transferLeadershipTimeout: 1m0s
  podTemplate:
    controller: {}
    metadata: {}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: quick-postgres
                  app.kubernetes.io/managed-by: kubedb.com
                  app.kubernetes.io/name: postgreses.kubedb.com
              namespaces:
              - app1
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: quick-postgres
                  app.kubernetes.io/managed-by: kubedb.com
                  app.kubernetes.io/name: postgreses.kubedb.com
              namespaces:
              - app1
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 50
      containerSecurityContext:
        capabilities:
          add:
          - IPC_LOCK
          - SYS_RESOURCE
        privileged: false
        runAsGroup: 70
        runAsUser: 70
      resources:
        limits:
          memory: 1Gi
        requests:
          cpu: 500m
          memory: 1Gi
      securityContext:
        fsGroup: 70
        runAsGroup: 70
        runAsUser: 70
      serviceAccountName: quick-postgres
  replicas: 1
  sslMode: disable
  storage:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: linode-block-storage-retain
  storageType: Durable
  terminationPolicy: Delete
  version: "13.2"
status:
  conditions:
  - lastTransitionTime: "2023-08-11T09:14:57Z"
    message: 'The KubeDB operator has started the provisioning of Postgres: app1/quick-postgres'
    reason: DatabaseProvisioningStartedSuccessfully
    status: "True"
    type: ProvisioningStarted
  - lastTransitionTime: "2023-08-11T09:59:22Z"
    message: All replicas are ready and in Running state
    observedGeneration: 40
    reason: AllReplicasReady
    status: "True"
    type: ReplicaReady
  - lastTransitionTime: "2023-08-11T09:59:22Z"
    message: 'The PostgreSQL: app1/quick-postgres is accepting client requests.'
    observedGeneration: 40
    reason: DatabaseAcceptingConnectionRequest
    status: "True"
    type: AcceptingConnection
  - lastTransitionTime: "2023-08-11T09:59:22Z"
    message: DB is ready because of server getting Online and Running state
    observedGeneration: 40
    reason: ReadinessCheckSucceeded
    status: "True"
    type: Ready
  - lastTransitionTime: "2023-08-11T09:15:34Z"
    message: 'The PostgreSQL: app1/quick-postgres is successfully provisioned.'
    observedGeneration: 2
    reason: DatabaseSuccessfullyProvisioned
    status: "True"
    type: Provisioned
  observedGeneration: 2
  phase: Ready
